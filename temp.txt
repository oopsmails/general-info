import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.net.URI;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.Map;

import javax.inject.Singleton;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.Produces;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Application;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.ext.Providers;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.parsers.SAXParserFactory;

import org.eclipse.persistence.jaxb.BeanValidationMode;
import org.eclipse.persistence.jaxb.MarshallerProperties;
import org.eclipse.persistence.jaxb.UnmarshallerProperties;
import org.glassfish.hk2.api.Factory;
import org.glassfish.hk2.utilities.binding.AbstractBinder;
import org.glassfish.jersey.client.ClientConfig;
import org.glassfish.jersey.jaxb.internal.AbstractRootElementJaxbProvider;
import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.test.DeploymentContext;
import org.glassfish.jersey.test.JerseyTest;
import org.glassfish.jersey.test.inmemory.InMemoryTestContainerFactory;
import org.glassfish.jersey.test.spi.TestContainer;
import org.glassfish.jersey.test.spi.TestContainerException;
import org.glassfish.jersey.test.spi.TestContainerFactory;
import org.junit.After;
import org.junit.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.util.StringUtils;



public abstract class AbstractRestResourceTest extends JerseyTest {

	protected final Logger logger = LoggerFactory.getLogger(getClass());

	MockHttpServletRequest request;
	
	Factory<HttpServletRequest> servletRequestFactory = new Factory<HttpServletRequest>() {
		@Override
		public HttpServletRequest provide() {
			return getRequest();
		}

		@Override
		public void dispose(HttpServletRequest instance) {
			// empty
		}
	};

	HttpServletRequest getRequest() {
		return request;
	}
	
	@Before
	public void init() {
		String url = System.getProperty("url");
		if (!StringUtils.hasText(url)) {
			CapturingDaoAspect.setShortCircuit(false);
		}
	}
	
	@After
	public void deinit() {
		final String url = System.getProperty("url");
		if (!StringUtils.hasText(url)) {
			CapturingDaoAspect.setShortCircuit(true);
		}
	}
	
	
	@Override
	protected void configureClient(ClientConfig config) {
		config.property(MarshallerProperties.BEAN_VALIDATION_MODE, BeanValidationMode.NONE);
		config.property(UnmarshallerProperties.BEAN_VALIDATION_MODE, BeanValidationMode.NONE);
		
		config.register(NonValidatingXmlProvider.class);
	}
	
	
	@Produces("application/xml")
	@Consumes("application/xml")
	@Singleton
	public static class NonValidatingXmlProvider extends AbstractRootElementJaxbProvider {

		public NonValidatingXmlProvider(@Context Factory<SAXParserFactory> spf, @Context Providers ps) {
	        super(ps, MediaType.APPLICATION_XML_TYPE);
	    }
		
		@Override
		protected void writeTo(Object t, MediaType mediaType, Charset c, Marshaller m, OutputStream entityStream) throws JAXBException {
			if(m.getClass().getName().startsWith("org.eclipse")) {
				m.setProperty(MarshallerProperties.BEAN_VALIDATION_MODE, BeanValidationMode.NONE);
			}
			super.writeTo(t, mediaType, c, m, entityStream);
		}
		
	    @Override
	    protected Object readFrom(Class<Object> type, MediaType mediaType, Unmarshaller u, InputStream entityStream) throws JAXBException {
			if(u.getClass().getName().startsWith("org.eclipse")) {
				u.setProperty(UnmarshallerProperties.BEAN_VALIDATION_MODE, BeanValidationMode.NONE);
			}
	    	return super.readFrom(type, mediaType, u, entityStream);
	    }
		
	}
	
	@Override
	protected Application configure() {
		ResourceConfig config = new XxxRestResourceConfig();
		config.property("contextConfigLocation", "classpath:applicationContext-service-test.xml");
		
		config.register(new AbstractBinder() {
			@Override
			protected void configure() {
				bindFactory(servletRequestFactory).to(HttpServletRequest.class);
			}
		});
		
		return config;
	}

	@Override
	// If running against external container pass URL via 'url' system property
	// e.g.: -Durl=http://localhost:8080/service-rest/api
	protected TestContainerFactory getTestContainerFactory() throws TestContainerException {
		final String url = System.getProperty("url");
		if (!StringUtils.hasText(url)) {
			System.out.println("Using InMemoryContainer");
			return new InMemoryTestContainerFactory();
		}
		System.out.println("Using external container at "+url);
		return new TestContainerFactory() {
			@Override
			public TestContainer create(URI baseUri, DeploymentContext deploymentContext) {
				return new TestContainer() {
					@Override
					public void stop() {
						//
					}
					
					@Override
					public void start() {
						//
					}
					
					@Override
					public ClientConfig getClientConfig() {
						ClientConfig clientConfig = new ClientConfig();
						// clientConfig.property(ClientProperties.PROXY_URI, "http://localhost:8089");
						// clientConfig.connectorProvider(new ApacheConnectorProvider());						
						return clientConfig;
					}
					
					@Override
					public URI getBaseUri() {
						return URI.create(url);
					}
				};
			}
		};
	}

	
	/**
	 * Proxy method to populate MockHttpServletRequest
	 */
	public WebTarget webTarget(String path) {
		request = new MockHttpServletRequest();
		return (WebTarget) Proxy.newProxyInstance(getClass().getClassLoader(), //
				new Class[] { WebTarget.class }, //
				new WebTargetHandler(target(path), path));
	}
	

	class WebTargetHandler implements InvocationHandler {
		private final Object target;
		private final String path;

		WebTargetHandler(Object target, String path) {
			this.target = target;
			this.path = path;
		}

		@Override
		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
			String methodName = method.getName();
			if("queryParam".equals(methodName)) {
				Object value = args[1];
				if(value instanceof String) {
					request.addParameter((String) args[0], (String) args[1]);
				} else if(value instanceof Object[]) {
					Object[] arr = (Object[]) value;
					String[] vals = new String[arr.length];
					for (int i = 0; i < arr.length; i++) {
						vals[i] = (String) arr[i];
					}
					request.addParameter((String) args[0], vals);
				}
				
				// re-wrap return value into a proxy
				return Proxy.newProxyInstance(getClass().getClassLoader(), //
						new Class[] { WebTarget.class }, //
						new WebTargetHandler(method.invoke(target, args), path));

			} else if("path".equals(methodName)) {
				String newPath = path;
				String arg = (String) args[0];
				if(!path.endsWith("/") && !arg.startsWith("/")) {
					newPath += "/";
				}
				newPath += arg;
				return Proxy.newProxyInstance(getClass().getClassLoader(), //
						new Class[] { WebTarget.class }, //
						new WebTargetHandler(method.invoke(target, args), newPath));
				
			} else if("request".equals(methodName)) {
				if(args != null && args.length > 0) {
					StringBuilder query = new StringBuilder();
					boolean first = true;
					for (Map.Entry<String, String[]> e : request.getParameterMap().entrySet()) {
						String key = e.getKey();
						String[] values = e.getValue();
						if (values == null || values.length == 0) {
							if(!first) query.append("&");
							query.append(URLEncoder.encode(key, "UTF-8")).append("=");
							first = false;
						} else {
							for (String value : values) {
								if(!first) query.append("&");
								query.append(URLEncoder.encode(key, "UTF-8")).append("=").append(URLEncoder.encode(value, "UTF-8"));
								first = false;
							}
						}
					}
					request.setQueryString(query.toString());
					
					if(args[0] instanceof String[]) {
						for (String type : (String[]) args[0]) {
							request.addHeader(HttpHeaders.ACCEPT, type);
						}
					} else if(args[0] instanceof MediaType[]) {
						for (MediaType type : (MediaType[]) args[0]) {
							request.addHeader(HttpHeaders.ACCEPT, type.getType());
						}
					}
					
					request.setPathInfo(path);
				}
				
				final Invocation.Builder builder = (Invocation.Builder) method.invoke(target, args);
				return Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] {Invocation.Builder.class}, //
						new InvocationHandler() {
							@Override
							public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
								if("header".equals(method.getName())) {
									request.addHeader((String) args[0], args[1]);
									method.invoke(builder, args);
									return proxy;  // return proxy
								}
								
								return method.invoke(builder, args);
							}
						});
			}

			return method.invoke(target, args);
		}
	}
	
}






======================================


import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;

import javax.validation.ParameterNameProvider;
import javax.validation.Validation;
import javax.ws.rs.container.ResourceContext;
import javax.ws.rs.core.Context;
import javax.ws.rs.ext.ContextResolver;

import org.eclipse.persistence.jaxb.BeanValidationMode;
import org.eclipse.persistence.jaxb.JAXBContextProperties;
import org.eclipse.persistence.jaxb.MarshallerProperties;
import org.eclipse.persistence.jaxb.UnmarshallerProperties;
import org.glassfish.jersey.media.multipart.MultiPartFeature;
import org.glassfish.jersey.message.GZipEncoder;
import org.glassfish.jersey.message.filtering.EntityFilteringFeature;
import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.server.ServerProperties;
import org.glassfish.jersey.server.filter.EncodingFilter;
import org.glassfish.jersey.server.validation.ValidationConfig;
import org.glassfish.jersey.server.validation.internal.InjectingConstraintValidatorFactory;


/**
 * Registers the components to be used by the JAX-RS application
 * 
 * @author zliu
 */
public class XxxRestResourceConfig extends ResourceConfig {

	public XxxRestResourceConfig() {
		register(EntityFilteringFeature.class);
		register(ValidationConfigurationContextResolver.class);
		
		register(MultiExceptionMapper.class);
		register(ParamExceptionMapper.class);
		register(RuntimeExceptionMapper.class);
		
		EncodingFilter.enableFor(this, GZipEncoder.class);
		
		packages("com.xxx.restresource");
		packages("com.xxx.converters");
		
		register(MultiPartFeature.class);
		
		register(XxxMoxyFeature.class);
		register(XxxMoxyJsonProvider.class);
		register(XxxXmlProvider.class);
		
		property(JAXBContextProperties.BEAN_VALIDATION_MODE, BeanValidationMode.NONE);

		property(MarshallerProperties.BEAN_VALIDATION_MODE, BeanValidationMode.NONE);
		property(UnmarshallerProperties.BEAN_VALIDATION_MODE, BeanValidationMode.NONE);
		
		property(ServerProperties.BV_SEND_ERROR_IN_RESPONSE, false);
		
		// request/response logging is done via RequestLoggingFilter
		//register(LoggingFilter.class);

		// validate responses without failure
		register(ResponseValidationFilter.class);
		
		property(ServerProperties.TRACING, "ALL");
	}
	
=========================================


import org.springframework.core.convert.converter.Converter;
import org.springframework.stereotype.Component;

import XxxType;
import XxxServiceUtil;

@Component
public class CitizenTypeConverter implements Converter<String, XxxType> {

	@Override
	public XxxType convert(String source) {
		return XxxServiceUtil.getCitizenType(source);
	}

}
-----------------------

@XmlType(name = "XxxType")
@XmlEnum
public enum XxxType {

    CAN,
    US,
    DUAL,
    OTHR;

    public String value() {
        return name();
    }

    public static XxxType fromValue(String v) {
        return valueOf(v);
    }

}

-----------------------

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

import javax.ws.rs.ext.ParamConverter;
import javax.ws.rs.ext.ParamConverterProvider;
import javax.ws.rs.ext.Provider;


@Provider
public class EnumTypeConverterProvider implements ParamConverterProvider {

	static final Method valueOfMethod;
	
	static final Map<Class<?>, Object> DEFAULTS = new HashMap<>();
	
	static {
		try {
			valueOfMethod = Enum.class.getDeclaredMethod("valueOf", Class.class, String.class);
		} catch (NoSuchMethodException ex) {
			throw new RuntimeException(ex); 
		}
		
		DEFAULTS.put(XxxType.class, XxxType.OTHR);
	}
	
	@Override
	public <T> ParamConverter<T> getConverter(final Class<T> rawType, Type genericType, Annotation[] annotations) {
		if(Enum.class.isAssignableFrom(rawType) //
				&& rawType.getPackage().getName().startsWith("com.schema.xsd.domain")) {
			
			return new ParamConverter<T>() {
				@Override
				public T fromString(String value) {
					return value == null ? null : (T) get(rawType, value);
				}

				@SuppressWarnings("unchecked")
				private T get(Class<T> type, String name) {
				    try {
				    	// NOTE: have to call fromValue() to handle correctly Enums generated from our schema
				    	try {
							return (T) type.getMethod("fromValue", String.class).invoke(null, name);
						} catch (ReflectiveOperationException | SecurityException ex) {
							// fallback to normal enum processing
					        return (T) valueOfMethod.invoke(null, name);
						}
				    } catch (IllegalArgumentException | ReflectiveOperationException ex) {
				        T defaultValue = (T) DEFAULTS.get(type);
						if(defaultValue != null) {
							return defaultValue;
						}
						throw new RuntimeException("Invalid enum value [" + name + "]");
				    }
				}

				@Override
				public String toString(T value) {
					try {
						return (String) rawType.getDeclaredMethod("value").invoke(value);
					} catch (ReflectiveOperationException ex) {
						throw new RuntimeException(ex);
					}
				}
			};
		}
		return null;
	}

}

-----------------------

import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.ws.rs.ext.ParamConverter;
import javax.ws.rs.ext.ParamConverterProvider;
import javax.ws.rs.ext.Provider;

@Provider
public class DateTypeConverterProvider implements ParamConverterProvider {

	static final ThreadLocal<SimpleDateFormat> DF = new ThreadLocal<SimpleDateFormat>() {
		@Override
		protected SimpleDateFormat initialValue() {
			return new SimpleDateFormat("yyyy-MM-dd");
		}
	};
	
	@Override
	public <T> ParamConverter<T> getConverter(Class<T> rawType, Type genericType, Annotation[] annotations) {
		if(Date.class.isAssignableFrom(rawType)) {
			return new ParamConverter<T>() {
				@SuppressWarnings("unchecked")
				@Override
				public T fromString(String value) {
					try {
						return value == null ? null : (T) DF.get().parse(value);
					} catch (ParseException ex) {
						throw new RuntimeException(ex);
					}
				}

				@Override
				public String toString(T value) {
					return DF.get().format((Date) value);
				}
			};
		}
		return null;
	}

}

-----------------------

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.DefaultConversionService;
import org.springframework.stereotype.Component;

@Component
public class XxxConversionService extends DefaultConversionService implements ApplicationContextAware, InitializingBean {

	private ApplicationContext applicationContext;

	@Override
	public void afterPropertiesSet() {
		for (Converter<?, ?> converter : applicationContext.getBeansOfType(Converter.class).values()) {
			addConverter(converter);
		}
	}

	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		this.applicationContext = applicationContext;
	}
	
}

-----------------------


import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.net.URI;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.Map;

import javax.inject.Singleton;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.Produces;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Application;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.ext.Providers;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.parsers.SAXParserFactory;

import org.eclipse.persistence.jaxb.BeanValidationMode;
import org.eclipse.persistence.jaxb.MarshallerProperties;
import org.eclipse.persistence.jaxb.UnmarshallerProperties;
import org.glassfish.hk2.api.Factory;
import org.glassfish.hk2.utilities.binding.AbstractBinder;
import org.glassfish.jersey.client.ClientConfig;
import org.glassfish.jersey.jaxb.internal.AbstractRootElementJaxbProvider;
import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.test.DeploymentContext;
import org.glassfish.jersey.test.JerseyTest;
import org.glassfish.jersey.test.inmemory.InMemoryTestContainerFactory;
import org.glassfish.jersey.test.spi.TestContainer;
import org.glassfish.jersey.test.spi.TestContainerException;
import org.glassfish.jersey.test.spi.TestContainerFactory;
import org.junit.After;
import org.junit.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.util.StringUtils;

import com.config.XxxRestResourceConfig;


public abstract class AbstractRestResourceTest extends JerseyTest {

	protected final Logger logger = LoggerFactory.getLogger(getClass());

	MockHttpServletRequest request;
	
	Factory<HttpServletRequest> servletRequestFactory = new Factory<HttpServletRequest>() {
		@Override
		public HttpServletRequest provide() {
			return getRequest();
		}

		@Override
		public void dispose(HttpServletRequest instance) {
			// empty
		}
	};

	HttpServletRequest getRequest() {
		return request;
	}
	
	@Before
	public void init() {
		String url = System.getProperty("url");
		if (!StringUtils.hasText(url)) {
			CapturingDaoAspect.setShortCircuit(false);
		}
	}
	
	@After
	public void deinit() {
		final String url = System.getProperty("url");
		if (!StringUtils.hasText(url)) {
			CapturingDaoAspect.setShortCircuit(true);
		}
	}
	
	
	@Override
	protected void configureClient(ClientConfig config) {
		config.property(MarshallerProperties.BEAN_VALIDATION_MODE, BeanValidationMode.NONE);
		config.property(UnmarshallerProperties.BEAN_VALIDATION_MODE, BeanValidationMode.NONE);
		
		config.register(NonValidatingXmlProvider.class);
	}
	
	
	@Produces("application/xml")
	@Consumes("application/xml")
	@Singleton
	public static class NonValidatingXmlProvider extends AbstractRootElementJaxbProvider {

		public NonValidatingXmlProvider(@Context Factory<SAXParserFactory> spf, @Context Providers ps) {
	        super(ps, MediaType.APPLICATION_XML_TYPE);
	    }
		
		@Override
		protected void writeTo(Object t, MediaType mediaType, Charset c, Marshaller m, OutputStream entityStream) throws JAXBException {
			if(m.getClass().getName().startsWith("org.eclipse")) {
				m.setProperty(MarshallerProperties.BEAN_VALIDATION_MODE, BeanValidationMode.NONE);
			}
			super.writeTo(t, mediaType, c, m, entityStream);
		}
		
	    @Override
	    protected Object readFrom(Class<Object> type, MediaType mediaType, Unmarshaller u, InputStream entityStream) throws JAXBException {
			if(u.getClass().getName().startsWith("org.eclipse")) {
				u.setProperty(UnmarshallerProperties.BEAN_VALIDATION_MODE, BeanValidationMode.NONE);
			}
	    	return super.readFrom(type, mediaType, u, entityStream);
	    }
		
	}
	
	@Override
	protected Application configure() {
		ResourceConfig config = new XxxRestResourceConfig();
		config.property("contextConfigLocation", "classpath:applicationContext-test.xml");
		
		config.register(new AbstractBinder() {
			@Override
			protected void configure() {
				bindFactory(servletRequestFactory).to(HttpServletRequest.class);
			}
		});
		
		return config;
	}

	@Override
	// If running against external container pass URL via 'url' system property
	// e.g.: -Durl=http://localhost:8080/service-rest/api
	protected TestContainerFactory getTestContainerFactory() throws TestContainerException {
		final String url = System.getProperty("url");
		if (!StringUtils.hasText(url)) {
			System.out.println("Using InMemoryContainer");
			return new InMemoryTestContainerFactory();
		}
		System.out.println("Using external container at "+url);
		return new TestContainerFactory() {
			@Override
			public TestContainer create(URI baseUri, DeploymentContext deploymentContext) {
				return new TestContainer() {
					@Override
					public void stop() {
						//
					}
					
					@Override
					public void start() {
						//
					}
					
					@Override
					public ClientConfig getClientConfig() {
						ClientConfig clientConfig = new ClientConfig();
						// clientConfig.property(ClientProperties.PROXY_URI, "http://localhost:8089");
						// clientConfig.connectorProvider(new ApacheConnectorProvider());						
						return clientConfig;
					}
					
					@Override
					public URI getBaseUri() {
						return URI.create(url);
					}
				};
			}
		};
	}

	
	/**
	 * Proxy method to populate MockHttpServletRequest
	 */
	public WebTarget webTarget(String path) {
		request = new MockHttpServletRequest();
		return (WebTarget) Proxy.newProxyInstance(getClass().getClassLoader(), //
				new Class[] { WebTarget.class }, //
				new WebTargetHandler(target(path), path));
	}
	

	class WebTargetHandler implements InvocationHandler {
		private final Object target;
		private final String path;

		WebTargetHandler(Object target, String path) {
			this.target = target;
			this.path = path;
		}

		@Override
		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
			String methodName = method.getName();
			if("queryParam".equals(methodName)) {
				Object value = args[1];
				if(value instanceof String) {
					request.addParameter((String) args[0], (String) args[1]);
				} else if(value instanceof Object[]) {
					Object[] arr = (Object[]) value;
					String[] vals = new String[arr.length];
					for (int i = 0; i < arr.length; i++) {
						vals[i] = (String) arr[i];
					}
					request.addParameter((String) args[0], vals);
				}
				
				// re-wrap return value into a proxy
				return Proxy.newProxyInstance(getClass().getClassLoader(), //
						new Class[] { WebTarget.class }, //
						new WebTargetHandler(method.invoke(target, args), path));

			} else if("path".equals(methodName)) {
				String newPath = path;
				String arg = (String) args[0];
				if(!path.endsWith("/") && !arg.startsWith("/")) {
					newPath += "/";
				}
				newPath += arg;
				return Proxy.newProxyInstance(getClass().getClassLoader(), //
						new Class[] { WebTarget.class }, //
						new WebTargetHandler(method.invoke(target, args), newPath));
				
			} else if("request".equals(methodName)) {
				if(args != null && args.length > 0) {
					StringBuilder query = new StringBuilder();
					boolean first = true;
					for (Map.Entry<String, String[]> e : request.getParameterMap().entrySet()) {
						String key = e.getKey();
						String[] values = e.getValue();
						if (values == null || values.length == 0) {
							if(!first) query.append("&");
							query.append(URLEncoder.encode(key, "UTF-8")).append("=");
							first = false;
						} else {
							for (String value : values) {
								if(!first) query.append("&");
								query.append(URLEncoder.encode(key, "UTF-8")).append("=").append(URLEncoder.encode(value, "UTF-8"));
								first = false;
							}
						}
					}
					request.setQueryString(query.toString());
					
					if(args[0] instanceof String[]) {
						for (String type : (String[]) args[0]) {
							request.addHeader(HttpHeaders.ACCEPT, type);
						}
					} else if(args[0] instanceof MediaType[]) {
						for (MediaType type : (MediaType[]) args[0]) {
							request.addHeader(HttpHeaders.ACCEPT, type.getType());
						}
					}
					
					request.setPathInfo(path);
				}
				
				final Invocation.Builder builder = (Invocation.Builder) method.invoke(target, args);
				return Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] {Invocation.Builder.class}, //
						new InvocationHandler() {
							@Override
							public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
								if("header".equals(method.getName())) {
									request.addHeader((String) args[0], args[1]);
									method.invoke(builder, args);
									return proxy;  // return proxy
								}
								
								return method.invoke(builder, args);
							}
						});
			}

			return method.invoke(target, args);
		}
	}
	
}







-----------------------


<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.service</groupId>
		<artifactId>service-parent</artifactId>
		<version>1.0.110-SNAPSHOT</version>
		<relativePath>..</relativePath>
	</parent>
	
	<artifactId>service-rest</artifactId>
	<packaging>war</packaging>

	<properties>
		<jerseytest.grizzly2>2.22.2</jerseytest.grizzly2>
		<org.glassfish.hk2.version>2.4.0</org.glassfish.hk2.version>
		<org.glassfish.grizzly.version>2.3.24</org.glassfish.grizzly.version>
	</properties>

	<dependencies>
    <dependency>
      <groupId>com.service</groupId>
      <artifactId>service-core</artifactId>
    </dependency>

		<!-- xerces -->
    <!-- 
		<dependency>
			<groupId>xerces</groupId>
			<artifactId>xercesImpl</artifactId>
			<version>2.11.0</version>
		</dependency>
    -->

		<!-- Jersey -->
		<dependency>
			<groupId>org.glassfish.jersey.ext</groupId>
			<artifactId>jersey-spring3</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.ext</groupId>
			<artifactId>jersey-bean-validation</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-server</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-common</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.ext</groupId>
			<artifactId>jersey-entity-filtering</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.bundles.repackaged</groupId>
			<artifactId>jersey-guava</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.hk2</groupId>
			<artifactId>hk2-api</artifactId>
			<version>${org.glassfish.hk2.version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.hk2</groupId>
			<artifactId>hk2-locator</artifactId>
			<version>${org.glassfish.hk2.version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.hk2</groupId>
			<artifactId>hk2-utils</artifactId>
			<version>${org.glassfish.hk2.version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.hk2</groupId>
			<artifactId>spring-bridge</artifactId>
			<version>${org.glassfish.hk2.version}</version>
		</dependency>
    
    <!-- 
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<version>${jersey.version}</version>
		</dependency>
         -->
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet-core</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-client</artifactId>
			<version>${jersey.version}</version>
		</dependency>

    <!--
    <dependency>
        <groupId>de.odysseus.staxon</groupId>
        <artifactId>staxon-jaxrs</artifactId>
        <version>1.3</version>
    </dependency>
    -->
    
    <!-- jersey test -->
    <dependency>
        <groupId>org.glassfish.jersey.test-framework.providers</groupId>
        <artifactId>jersey-test-framework-provider-inmemory</artifactId>
        <version>${jersey.version}</version>  <!-- 2.22.1 -->
        <scope>test</scope>
    </dependency>
    
    <!-- 
    <dependency>
      <groupId>org.jboss.logging</groupId>
      <artifactId>jboss-logging</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml</groupId>
      <artifactId>classmate</artifactId>
    </dependency>
         -->
    <!-- for smtp appender -->
    <dependency>
      <groupId>javax.mail</groupId>
      <artifactId>mailapi</artifactId>
      <version>1.4.2</version>
    </dependency>
    <dependency>
      <groupId>com.sun.mail</groupId>
      <artifactId>smtp</artifactId>
      <version>1.4.5</version>	      
    </dependency>    
    
        <dependency>
          <groupId>org.hamcrest</groupId>
          <artifactId>hamcrest-core</artifactId>
          <scope>test</scope>
        </dependency>
        
        <dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
		  <groupId>com.googlecode.catch-exception</groupId>
		  <artifactId>catch-exception</artifactId>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.test-framework</groupId>
			<artifactId>jersey-test-framework-core</artifactId>
			<version>${jersey.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
		</dependency>
		<!-- apache standard taglibs -->
		<dependency>
			<groupId>org.apache.taglibs</groupId>
			<artifactId>taglibs-standard-spec</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.taglibs</groupId>
			<artifactId>taglibs-standard-impl</artifactId>
		</dependency>  
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-test</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>com.thoughtworks.xstream</groupId>
          <artifactId>xstream</artifactId>
          <version>1.4.8</version>
          <scope>test</scope>
        </dependency>

        <dependency>
          <groupId>org.apache.tomcat</groupId>
          <artifactId>tomcat-jdbc</artifactId>
          <scope>test</scope>
        </dependency>
<!--         <dependency> -->
<!--           <groupId>com.sybase.jdbc4.jdbc</groupId> -->
<!--           <artifactId>jconn4</artifactId> -->
<!--           <scope>test</scope> -->
<!--         </dependency> -->

		<!-- Using org.javassist -->
		<dependency>
			<groupId>org.javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.18.1-GA</version>
		</dependency>


		<!-- Using Moxy -->
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-moxy</artifactId>
			<version>${jersey.version}</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-jaxb</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>org.eclipse.persistence.antlr</artifactId>
			<version>${org.eclipse.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>org.eclipse.persistence.moxy</artifactId>
			<version>${org.eclipse.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>org.eclipse.persistence.core</artifactId>
			<version>${org.eclipse.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>org.eclipse.persistence.asm</artifactId>
			<version>${org.eclipse.version}</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-multipart</artifactId>
			<version>${jersey.version}</version>
		</dependency>

        <!-- 
        <dependency>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
          <version>2.7.0</version>
          <scope>test</scope>
        </dependency>
         -->

		<!-- jvnet -->
		<dependency>
			<groupId>org.jvnet.mimepull</groupId>
			<artifactId>mimepull</artifactId>
			<version>1.9.3</version>
		</dependency>

		<!-- javax -->
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>2.0.1</version>
		</dependency>
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.2</version>
		</dependency>
		
		<!-- Jersey testing, grizzly -->
        <!-- 
		<dependency>
			<groupId>org.glassfish.jersey.test-framework.providers</groupId>
			<artifactId>jersey-test-framework-provider-grizzly2</artifactId>
			<version>${jerseytest.grizzly2}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-grizzly2-http</artifactId>
			<version>${jerseytest.grizzly2}</version>
			<scope>test</scope>
		</dependency>
        -->
        
		<dependency>
		    <groupId>org.glassfish.jersey.containers</groupId>
		    <artifactId>jersey-container-grizzly2-servlet</artifactId>
		    <version>${jersey.version}</version>
		    <scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.glassfish.grizzly</groupId>
			<artifactId>grizzly-http</artifactId>
			<version>${org.glassfish.grizzly.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.grizzly</groupId>
			<artifactId>grizzly-framework</artifactId>
			<version>${org.glassfish.grizzly.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.grizzly</groupId>
			<artifactId>grizzly-http-server</artifactId>
			<version>${org.glassfish.grizzly.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.grizzly</groupId>
			<artifactId>grizzly-http-servlet</artifactId>
			<version>${org.glassfish.grizzly.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-web-api</artifactId>
			<version>7.0</version>
			<scope>provided</scope>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>create</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
					<execution>
						<id>create-metadata</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>create-metadata</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-war-plugin</artifactId>
			<configuration>
				<archive>
		            <manifest>
		              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
		            </manifest>				
					<manifestEntries>
						<Implementation-Revision>${buildNumber}</Implementation-Revision>
					</manifestEntries>
				</archive>
			</configuration>
		</plugin>			
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>buildnumber-maven-plugin</artifactId>
										<versionRange>[1.4,)</versionRange>
										<goals>
											<goal>create</goal>
											<goal>create-metadata</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>analysis</id>
			<build>
				<plugins>	
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>cobertura-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>	
	</profiles>

</project>



-----------------------





-----------------------









-----------------------












-----------------------

