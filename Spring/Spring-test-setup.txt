
==> core:

-->
src/resources

applicationContex-core.xml, import others, e.g, applicationContext-core-db.xml
<bean id="dateService" class="com.bns.wm.wealthservice.common.DateService"/>

applicationContext-core-db.xml, define dataSource, by jndi

<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
	<property name="jndiName" value="java:comp/env/jdbc/abcDS" />
</bean>

<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	<property name="dataSource" ref="dataSource" />
	<property name="exceptionTranslator">
		<bean class="com.abc.util.AbcSqlErrorCodesTranslator"/>
	</property>
</bean>

<bean id="transactionManager"
	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"/>
</bean>

<!-- Instance of transaction template -->
<bean id="transactionTemplate"
	class="org.springframework.transaction.support.TransactionTemplate">
	<property name="transactionManager" ref="transactionManager"/>
</bean>


-->
test/resources

applicationContex-core-test.xml, just define overriding beans, e.g,

<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
	 <property name="driverClassName" value="com.sybase.jdbc4.jdbc.SybDriver"/>
	 <property name="url" value="jdbc:sybase:Tds:0.0.0.0:4100/DbName"/>
	 <property name="username" value="changeme"/>
	 <property name="password" value="changeme"/>
	 <property name="jmxEnabled" value="false"/>
</bean>


<bean id="dateService" class="com.abc.DateServiceStub"/>

--> in unit test class
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { //
		"classpath:applicationContext-core.xml", //
		"classpath:applicationContext-core-test.xml" //
})
public class AbcServiceTest {



==> web


-->
src/resources

applicationContex-rest.xml, import others,
<import resource="classpath:applicationContext-core.xml" />


-->
test/resources

applicationContex-rest-test.xml, import applicationContex-rest.xml

<import resource="file:src/main/webapp/WEB-INF/spring/applicationContext-rest.xml" />

and other beans, which originally defined in applicationContex-core-test.xml

<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
	 <property name="driverClassName" value="com.sybase.jdbc4.jdbc.SybDriver"/>
	 <property name="url" value="jdbc:sybase:Tds:0.0.0.0:4100/DbName"/>
	 <property name="username" value="changeme"/>
	 <property name="password" value="changeme"/>
	 <property name="jmxEnabled" value="false"/>
</bean>


<bean id="dateService" class="com.abc.DateServiceStub"/>


--> in unit test class, define applicationContext-rest-test.xml to load everything ...


public class AbcResourceTest extends AbstractRestResourceTest {@Test ...}

public abstract class AbstractRestResourceTest extends JerseyTest {

	/**
	* Create the tested JAX-RS /Jersey application / container.
	*/
	@Override
	protected Application configure() {
		ResourceConfig config = new AbcRestResourceConfig();
		config.property("contextConfigLocation", "classpath:applicationContext-rest-test.xml");
		
		config.register(new AbstractBinder() {
			@Override
			protected void configure() {
				bindFactory(servletRequestFactory).to(HttpServletRequest.class);
			}
		});
		
		return config;
	}

}







